#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Smart Classroom Environment Monitoring"
  https://create.arduino.cc/cloud/things/0d9e9f74-9288-4ce3-8087-03b0b0699ddc 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  int airquality;
  int lightlevel;
  CloudRelativeHumidity humidity;
  bool solenoidstatus;
  CloudTemperature temperature;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <WiFi.h>
#include <DHT.h>

// Sensor Pins
#define DHTPIN 4         // DHT11 sensor data pin
#define DHTTYPE DHT11
#define MQ135_PIN 34     // Analog pin for MQ135 sensor
#define LDR_PIN 35       // Analog pin for LDR sensor
#define RELAY_PIN 5      // GPIO controlling relay

DHT dht(DHTPIN, DHTTYPE);

void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 

  // Defined in thingProperties.h
  initProperties();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information you’ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();

     // Initialize DHT Sensor
    dht.begin();
    
    // Set relay pin as output
    pinMode(RELAY_PIN, OUTPUT);
    digitalWrite(RELAY_PIN, LOW); // Ensure solenoid is OFF initially
    
    Serial.println("System Initialized");
}

void loop() {
  ArduinoCloud.update();
  // Your code here 
  
  // Read Sensor Data
    temperature = dht.readTemperature(); // Read temperature in Celsius
    humidity = dht.readHumidity();       // Read humidity
    airquality = analogRead(MQ135_PIN);  // Read MQ135 sensor value
    lightlevel = analogRead(LDR_PIN);    // Read LDR value

    Serial.print("Temperature: "); Serial.print(temperature); Serial.println(" °C");
    Serial.print("Humidity: "); Serial.print(humidity); Serial.println(" %");
    Serial.print("Air Quality: "); Serial.println(airquality);
    Serial.print("Light Level: "); Serial.println(lightlevel);

    // Control Solenoid Valve based on temperature
    if (temperature > 32) {
        solenoidstatus = true;  // Turn ON Solenoid
        digitalWrite(RELAY_PIN, HIGH);
        Serial.println("Solenoid Activated!");
    } else {
        solenoidstatus = false; // Turn OFF Solenoid
        digitalWrite(RELAY_PIN, LOW);
        Serial.println("Solenoid Deactivated!");
    }

    delay(2000); // Wait 2 seconds before next reading
}

/*
  Since Temperature is READ_WRITE variable, onTemperatureChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onTemperatureChange()  {
  // Add your code here to act upon Temperature change
}

/*
  Since Humidity is READ_WRITE variable, onHumidityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onHumidityChange()  {
  // Add your code here to act upon Humidity change
}

/*
  Since Airquality is READ_WRITE variable, onAirqualityChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAirqualityChange()  {
  // Add your code here to act upon Airquality change
}

/*
  Since Lightlevel is READ_WRITE variable, onLightlevelChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onLightlevelChange()  {
  // Add your code here to act upon Lightlevel change
}

/*
  Since Solenoidstatus is READ_WRITE variable, onSolenoidstatusChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onSolenoidstatusChange()  {
  // Add your code here to act upon Solenoidstatus change
}
