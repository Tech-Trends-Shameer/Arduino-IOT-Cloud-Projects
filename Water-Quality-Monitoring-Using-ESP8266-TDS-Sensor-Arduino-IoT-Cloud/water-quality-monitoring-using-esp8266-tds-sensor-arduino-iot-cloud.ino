#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Water Quality Monitoring"
  https://create.arduino.cc/cloud/things/18021ae9-c865-4092-8427-918908322cf1 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  float ec;
  float tds;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <LiquidCrystal_I2C.h>

// LCD configuration
LiquidCrystal_I2C lcd(0x27, 16, 2);

// Pin configuration
const byte TDS_SENSOR_PIN = A0;  // Only A0 available on ESP8266

// Calibration and offset values
const float AREF = 3.3;           // Max analog voltage for NodeMCU (A0)
const float EC_CALIBRATION = 1.0; // Sensor calibration factor
const float OFFSET = 0.14;        // Offset for dry sensor reading

// Variables for TDS and EC
float tdsValue = 0;
float ecValue = 0;

void setup() {
  Serial.begin(9600);
  delay(1500);

  lcd.init();
  lcd.backlight();

  lcd.setCursor(3, 0);
  lcd.print("Tech Trends");
  lcd.setCursor(3, 1);
  lcd.print("Shameer");
  delay(2000);
  lcd.clear();

  lcd.setCursor(1, 0);
  lcd.print("Water Quality");
  lcd.setCursor(3, 1);
  lcd.print("Monitoring");
  delay(2000);
  lcd.clear();

  // Initialize IoT Cloud
  initProperties();
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);

  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  readTdsAndEc();
  delay(1000);
}

void readTdsAndEc() {
  // Read analog value and calculate voltage
  float rawEc = analogRead(TDS_SENSOR_PIN) * AREF / 1024.0;

  // Apply calibration and offset
  ecValue = (rawEc * EC_CALIBRATION) - OFFSET;
  if (ecValue < 0) ecValue = 0;

  // Convert EC to TDS
  tdsValue = (133.42 * pow(ecValue, 3) - 255.86 * ecValue * ecValue + 857.39 * ecValue) * 0.5;

  Serial.print("TDS: ");
  Serial.println(tdsValue);
  Serial.print("EC: ");
  Serial.println(ecValue, 2);

  // LCD display
  lcd.clear();
  lcd.setCursor(0, 0);
  lcd.print("TDS: ");
  lcd.setCursor(4, 0);
  lcd.print(tdsValue, 0);

  lcd.setCursor(0, 1);
  lcd.print("EC: ");
  lcd.setCursor(4, 1);
  lcd.print(ecValue, 2);

  // Update Arduino IoT Cloud
  tds = tdsValue;
  ec = ecValue;
}

// Called when TDS is updated from the dashboard
void onTdsChange()  {
  // Optional: actions on TDS update
}

// Called when EC is updated from the dashboard
void onEcChange()  {
  // Optional: actions on EC update
}
